{"ast":null,"code":"// Simple symptom extraction: take first word(s) after 'have', 'having', or 'suffering from', else use 'general'\nfunction extractSymptom(text) {\n  const match = text.match(/(?:have|having|suffering from) ([a-zA-Z ]+)/i);\n  if (match && match[1]) {\n    return match[1].split(\" \")[0]; // take first word as symptom\n  }\n  return \"general\";\n}\nexport const sendMessageToAPI = async (userMessage, name, age) => {\n  try {\n    const user_id = name || \"anonymous\";\n    const symptom = extractSymptom(userMessage);\n    const response = await fetch(\"http://127.0.0.1:5000/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: userMessage,\n        user_id,\n        symptom\n      })\n    });\n    const data = await response.json();\n    return data.reply;\n  } catch (error) {\n    return \"⚠️ Sorry, I couldn't connect to the server.\";\n  }\n};","map":{"version":3,"names":["extractSymptom","text","match","split","sendMessageToAPI","userMessage","name","age","user_id","symptom","response","fetch","method","headers","body","JSON","stringify","message","data","json","reply","error"],"sources":["C:/Users/harikarthi/project/medical-chatbot/src/services/api.js"],"sourcesContent":["\r\n// Simple symptom extraction: take first word(s) after 'have', 'having', or 'suffering from', else use 'general'\r\nfunction extractSymptom(text) {\r\n  const match = text.match(/(?:have|having|suffering from) ([a-zA-Z ]+)/i);\r\n  if (match && match[1]) {\r\n    return match[1].split(\" \")[0]; // take first word as symptom\r\n  }\r\n  return \"general\";\r\n}\r\n\r\nexport const sendMessageToAPI = async (userMessage, name, age) => {\r\n  try {\r\n    const user_id = name || \"anonymous\";\r\n    const symptom = extractSymptom(userMessage);\r\n    const response = await fetch(\"http://127.0.0.1:5000/chat\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ message: userMessage, user_id, symptom }),\r\n    });\r\n    const data = await response.json();\r\n    return data.reply;\r\n  } catch (error) {\r\n    return \"⚠️ Sorry, I couldn't connect to the server.\";\r\n  }\r\n};\r\n"],"mappings":"AACA;AACA,SAASA,cAAcA,CAACC,IAAI,EAAE;EAC5B,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAK,CAAC,8CAA8C,CAAC;EACxE,IAAIA,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;IACrB,OAAOA,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACjC;EACA,OAAO,SAAS;AAClB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,WAAW,EAAEC,IAAI,EAAEC,GAAG,KAAK;EAChE,IAAI;IACF,MAAMC,OAAO,GAAGF,IAAI,IAAI,WAAW;IACnC,MAAMG,OAAO,GAAGT,cAAc,CAACK,WAAW,CAAC;IAC3C,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;MACzDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,OAAO,EAAEZ,WAAW;QAAEG,OAAO;QAAEC;MAAQ,CAAC;IACjE,CAAC,CAAC;IACF,MAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,KAAK;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO,6CAA6C;EACtD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}